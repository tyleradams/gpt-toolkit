#!/usr/bin/env python3
D = False
import click
import json
import re
import sys

CTRL_RETURN = "\n".join(['keydown Control_L','key Return','keyup Control_L'])
def flatten(ll):
    out = []
    for l in ll:
        out.extend(l)
    return out

def add_str(line):
    if line.startswith("key"):
        return line
    return "str " + line

def remove_codetype(lines):
    in_block = False
    for i in range(len(lines)):
        line = lines[i]
        if in_block and re.match(r'^ *```', line):
            lines[i] = '```'
            in_block = False
        elif not in_block and re.match(r'^ *```', line):
            lines[i] = "```X"
            in_block = True
    return lines

def remove_numbers(lines):
    for i in range(len(lines)):
        line = lines[i]
        is_number_line = re.match(r'^\d\d*\. ', line)
        if is_number_line:
            lines[i] = lines[i] + "\nkey Return"
    return lines

def remove_bullets(lines):
    in_bullet = False
    for i in range(len(lines)):
        line = lines[i]
        if line.startswith("-") and not in_bullet:
            in_bullet = True
        elif line.startswith("-") and in_bullet:
            lines[i] = lines[i][2:]
        elif not line.startswith("-") and in_bullet:
            in_bullet = False
    return lines

def escape_quote(line):
    return line.replace("'","")

def add_return(lines):
    for i in range(len(lines)):
        string = lines[i]
        if string.startswith("```") or lines[i] == CTRL_RETURN or (i + 1 < len(lines) and lines[i+1] == CTRL_RETURN):
            lines[i] = [string]
        else:
            lines[i] = [string, "key Return"]
    return lines

def chunk_string(string, chunk_size=200):
    return [string[i:i+chunk_size] for i in range(0, len(string), chunk_size)]

def escape_codeblock(lines):
    for i in range(len(lines)):
        line = lines[i]
        if line.startswith("```X") and " " not in line:
            lines[i] = "```"
        if line.startswith("```") and " " not in line and "X" not in line:
            lines[i] = "\n".join(['keydown Control_L','key Return','keyup Control_L'])
    return lines

def fix_bold(line):
    if line.startswith("```"):
        return [line]
    lines = line.split("`")
    bold = "\n" + "\n".join(['keydown Control_L','key b','keyup Control_L']) + "\n"
    return bold.join(lines).split("\n")

@click.command()
@click.option('--chunk_size', default=200, help='Size of the chunks the string is broken into.')
def transform(chunk_size):
    '''
    This script does some text transformation. It adds special strings, escapes 
    quote characters, breaks strings into chunks, adds 'Return' key presses, 
    and more. It reads from the standard input and writes to the standard output.
    '''
    lines = sys.stdin.readlines()
    a = [lines]
    a.append([l.rstrip() for l in a[-1]])
    a.append(remove_bullets(a[-1]))
    a.append(remove_numbers(a[-1]))
    a.append(remove_codetype(a[-1]))
    a.append(escape_codeblock(a[-1]))
    a.append(flatten(add_return(a[-1])))
    D and print(json.dumps(a[-1]))
    a.append(flatten([chunk_string(l, chunk_size) for l in a[-1]]))
    a.append(flatten([fix_bold(l) for l in a[-1]]))
    a.append([escape_quote(l) for l in a[-1]])
    a.append([add_str(l) for l in a[-1]])
    print("\n".join(a[-1]))

if __name__ == '__main__':
    transform()
